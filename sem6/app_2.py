"""–°–æ–∑–¥–∞—Ç—å –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–∞ FastAPI, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—Ç—å API –¥–ª—è
—Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å
—Å–ª–µ–¥—É—é—â–∏–µ –ø–æ–ª—è:
‚óã ID (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
‚óã –ò–º—è (—Å—Ç—Ä–æ–∫–∞, –Ω–µ –º–µ–Ω–µ–µ 2 —Å–∏–º–≤–æ–ª–æ–≤)
‚óã –§–∞–º–∏–ª–∏—è (—Å—Ç—Ä–æ–∫–∞, –Ω–µ –º–µ–Ω–µ–µ 2 —Å–∏–º–≤–æ–ª–æ–≤)
‚óã –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è (—Å—Ç—Ä–æ–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ "YYYY-MM-DD")
‚óã Email (—Å—Ç—Ä–æ–∫–∞, –≤–∞–ª–∏–¥–Ω—ã–π email)
‚óã –ê–¥—Ä–µ—Å (—Å—Ç—Ä–æ–∫–∞, –Ω–µ –º–µ–Ω–µ–µ 5 —Å–∏–º–≤–æ–ª–æ–≤)
API –¥–æ–ª–∂–µ–Ω –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏:
‚óã –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
‚óã –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
‚óã –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID
‚óã –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID
‚óã –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID
üìå –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö SQLite3 –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è
–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."""


from fastapi import FastAPI
from pydantic import BaseModel, Field, EmailStr
import databases
import sqlalchemy
from faker import Faker
from typing import List
from datetime import date



DATABASE_URL = "sqlite:///db2_sem6.db"

database = databases.Database(DATABASE_URL)



metadata = sqlalchemy.MetaData()



app = FastAPI()

fake = Faker()


class UserIn(BaseModel):
    username: str = Field(..., max_length=32, min_length=2)
    birth_date: date
    email: EmailStr = Field(..., max_length=128)
    address: str = Field(..., min_length=6)


class User(UserIn):
    id: int


users = sqlalchemy.Table(
    "users",
    metadata,
    sqlalchemy.Column("id", sqlalchemy.Integer, primary_key=True),
    sqlalchemy.Column("username", sqlalchemy.String(32)),
    sqlalchemy.Column("birth_date", sqlalchemy.Date()),
    sqlalchemy.Column("email", sqlalchemy.String(128)),
    sqlalchemy.Column("address", sqlalchemy.String(20)),
)


engine = sqlalchemy.create_engine(DATABASE_URL, connect_args={"check_same_thread": False})

metadata.create_all(engine)


# @app.get("/users/{count}")
# async def create_users(count: int):
#     for _ in range(count):
#         query = users.insert().values(username=fake.name(), birth_date=fake.date_of_birth(), email=fake.email(),
#                                       address=fake.address())
#         await database.execute(query)
#     return {'message': f'{count} fake users create'}


@app.get("/users/", response_model=List[User])
async def get_users():
    query = users.select().limit(25)
    return await database.fetch_all(query)


@app.get("/users/{user_id}", response_model=User)
async def get_usr_by_id(user_id: int):
    query = users.select().where(users.c.id == user_id)
    return await database.fetch_one(query)


@app.post("/users/", response_model=User)
async def create_user(user: UserIn):
    query = users.insert().values(**user.model_dump())
    last_record_id = await database.execute(query)
    return {**user.model_dump(), "id": last_record_id}


@app.put("/users/{id_user}", response_model=User)
async def upd_user(id_user: int, upd_usr: UserIn):
    query = users.update().where(users.c.id == id_user).values(upd_usr.model_dump())
    await database.execute(query)
    return {**upd_usr.model_dump(), "id": id_user}

@app.delete("/users/{id_user}")
async def del_usr(id_user: int):
    query = users.delete().where(users.c.id == id_user)
    await database.execute(query)
    return {'message': 'User deleted'}


