"""üìå –°–æ–∑–¥–∞—Ç—å API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ñ–∏–ª—å–º–æ–≤ –ø–æ –∂–∞–Ω—Ä—É. –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ
–∏–º–µ—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–ª—É—á–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Ñ–∏–ª—å–º–æ–≤ –ø–æ –∑–∞–¥–∞–Ω–Ω–æ–º—É –∂–∞–Ω—Ä—É.
üìå –°–æ–∑–¥–∞–π—Ç–µ –º–æ–¥—É–ª—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ —Å–µ—Ä–≤–µ—Ä –∏ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—é.
üìå –°–æ–∑–¥–∞–π—Ç–µ –∫–ª–∞—Å—Å Movie —Å –ø–æ–ª—è–º–∏ id, title, description –∏ genre.
üìå –°–æ–∑–¥–∞–π—Ç–µ —Å–ø–∏—Å–æ–∫ movies –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∏–ª—å–º–æ–≤.
üìå –°–æ–∑–¥–∞–π—Ç–µ –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ñ–∏–ª—å–º–æ–≤ –ø–æ –∂–∞–Ω—Ä—É (–º–µ—Ç–æ–¥ GET).
üìå –†–µ–∞–ª–∏–∑—É–π—Ç–µ –≤–∞–ª–∏–¥–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–∞ –∏ –æ—Ç–≤–µ—Ç–∞."""


from fastapi import FastAPI
import logging
from typing import Optional
from pydantic import BaseModel

app = FastAPI()

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class Movie(BaseModel):
    id: int
    title: str
    description: Optional[str] = None
    genre: Optional[str] = None


movie_1 = Movie(id=1, title="Taxi", description="Lorem ipsum dolor sit amet.", genre="comedy")
movie_2 = Movie(id=2, title="Matrix", description="Lorem ipsum dolor sit amet.", genre="fantastic")
movie_3 = Movie(id=3, title="Fifth element", description="Lorem ipsum dolor sit amet.", genre="fantastic")
movies = [movie_1, movie_2, movie_3]


@app.get("/")
async def read_root():
    logger.info('–û—Ç—Ä–∞–±–æ—Ç–∞–ª GET –∑–∞–ø—Ä–æ—Å.')
    return {"Hello": "Seminar 5"}


@app.get("/movies")
async def get_movies_genre(genre: str):
    result_lst = []
    for i in range(len(movies)):
        if movies[i].genre == genre:
            result_lst.append(movies[i])
    logger.info(f'–û—Ç—Ä–∞–±–æ—Ç–∞–ª GET –∑–∞–ø—Ä–æ—Å –¥–ª—è movies - –ø–æ–∏—Å–∫ –ø–æ –∂–∞–Ω—Ä—É')
    return result_lst


@app.get("/all_movies")
async def get_all_movies():
    logger.info(f'–û—Ç—Ä–∞–±–æ—Ç–∞–ª GET –∑–∞–ø—Ä–æ—Å –¥–ª—è movies - –ø–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ–≥–æ —Å–ø–∏—Å–∫–∞')
    return movies



@app.post("/movies/")
async def create_movie(movie: Movie):
    logger.info('–û—Ç—Ä–∞–±–æ—Ç–∞–ª POST –∑–∞–ø—Ä–æ—Å —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Ñ–∏–ª—å–º–∞.')
    movies.append(movie)
    return movie


@app.put("/movies/{movie_id}")
async def update_movie(movie_id: int, movie: Movie):
    for i in range(len(movies)):
        if movies[i].id == movie_id:
            movies[i] = movie
    logger.info(f'–û—Ç—Ä–∞–±–æ—Ç–∞–ª PUT –∑–∞–ø—Ä–æ—Å –¥–ª—è movie id = {movie}')
    return movie



@app.delete("/movies/{movie_id}")
async def delete_movie(movie_id: int):
    for i in range(len(movies)):
        if movies[i].id == movie_id:
            movies.remove(movies[i])
    logger.info(f'–û—Ç—Ä–∞–±–æ—Ç–∞–ª DELETE –∑–∞–ø—Ä–æ—Å –¥–ª—è movie_id = {movie_id}.')
    #return {"item_id": item_id}

#
# @app.post("/tasks/")
# async def create_task(task: Task):
#     logger.info('–û—Ç—Ä–∞–±–æ—Ç–∞–ª POST –∑–∞–ø—Ä–æ—Å —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏.')
#     tasks.append(task)
#     return task
#
#
# @app.put("/tasks/{tasks_id}")
# async def update_task(task_id: int, task: Task):
#     for i in range(len(tasks)):
#         if tasks[i].id == task_id:
#             tasks[i] = task
#     logger.info(f'–û—Ç—Ä–∞–±–æ—Ç–∞–ª PUT –∑–∞–ø—Ä–æ—Å –¥–ª—è task id = {task}')
#     return task
#
#
# @app.delete("/tasks/{tasks_id}")
# async def delete_item(task_id: int):
#     for i in range(len(tasks)):
#         if tasks[i].id == task_id:
#             tasks.remove(tasks[i])
#     logger.info(f'–û—Ç—Ä–∞–±–æ—Ç–∞–ª DELETE –∑–∞–ø—Ä–æ—Å –¥–ª—è task_id = {task_id}.')
#     #return {"item_id": item_id}